{-# LANGUAGE DeriveDataTypeable #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-missing-fields #-}
{-# OPTIONS_GHC -fno-warn-missing-signatures #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-----------------------------------------------------------------
-- Autogenerated by Thrift Compiler (0.11.0)                      --
--                                                             --
-- DO NOT EDIT UNLESS YOU ARE SURE YOU KNOW WHAT YOU ARE DOING --
-----------------------------------------------------------------

module Dependency_Types where
import Prelude (($), (.), (>>=), (==), (++))
import qualified Prelude as P
import qualified Control.Exception as X
import qualified Control.Monad as M ( liftM, ap, when )
import Data.Functor ( (<$>) )
import qualified Data.ByteString.Lazy as LBS
import qualified Data.Hashable as H
import qualified Data.Int as I
import qualified Data.Maybe as M (catMaybes)
import qualified Data.Text.Lazy.Encoding as E ( decodeUtf8, encodeUtf8 )
import qualified Data.Text.Lazy as LT
import qualified GHC.Generics as G (Generic)
import qualified Data.Typeable as TY ( Typeable )
import qualified Data.HashMap.Strict as Map
import qualified Data.HashSet as Set
import qualified Data.Vector as Vector
import qualified Test.QuickCheck.Arbitrary as QC ( Arbitrary(..) )
import qualified Test.QuickCheck as QC ( elements )

import qualified Thrift as T
import qualified Thrift.Types as T
import qualified Thrift.Arbitraries as T


data DependencyLink = DependencyLink  { dependencyLink_parent :: LT.Text
  , dependencyLink_child :: LT.Text
  , dependencyLink_callCount :: I.Int64
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable DependencyLink where
  hashWithSalt salt record = salt   `H.hashWithSalt` dependencyLink_parent record   `H.hashWithSalt` dependencyLink_child record   `H.hashWithSalt` dependencyLink_callCount record  
instance QC.Arbitrary DependencyLink where 
  arbitrary = M.liftM DependencyLink (QC.arbitrary)
          `M.ap`(QC.arbitrary)
          `M.ap`(QC.arbitrary)
  shrink obj | obj == default_DependencyLink = []
             | P.otherwise = M.catMaybes
    [ if obj == default_DependencyLink{dependencyLink_parent = dependencyLink_parent obj} then P.Nothing else P.Just $ default_DependencyLink{dependencyLink_parent = dependencyLink_parent obj}
    , if obj == default_DependencyLink{dependencyLink_child = dependencyLink_child obj} then P.Nothing else P.Just $ default_DependencyLink{dependencyLink_child = dependencyLink_child obj}
    , if obj == default_DependencyLink{dependencyLink_callCount = dependencyLink_callCount obj} then P.Nothing else P.Just $ default_DependencyLink{dependencyLink_callCount = dependencyLink_callCount obj}
    ]
from_DependencyLink :: DependencyLink -> T.ThriftVal
from_DependencyLink record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v2 -> P.Just (1, ("parent",T.TString $ E.encodeUtf8 _v2))) $ dependencyLink_parent record
  , (\_v2 -> P.Just (2, ("child",T.TString $ E.encodeUtf8 _v2))) $ dependencyLink_child record
  , (\_v2 -> P.Just (4, ("callCount",T.TI64 _v2))) $ dependencyLink_callCount record
  ]
write_DependencyLink :: T.Protocol p => p -> DependencyLink -> P.IO ()
write_DependencyLink oprot record = T.writeVal oprot $ from_DependencyLink record
encode_DependencyLink :: T.StatelessProtocol p => p -> DependencyLink -> LBS.ByteString
encode_DependencyLink oprot record = T.serializeVal oprot $ from_DependencyLink record
to_DependencyLink :: T.ThriftVal -> DependencyLink
to_DependencyLink (T.TStruct fields) = DependencyLink{
  dependencyLink_parent = P.maybe (P.error "Missing required field: parent") (\(_,_val4) -> (case _val4 of {T.TString _val5 -> E.decodeUtf8 _val5; _ -> P.error "wrong type"})) (Map.lookup (1) fields),
  dependencyLink_child = P.maybe (P.error "Missing required field: child") (\(_,_val4) -> (case _val4 of {T.TString _val6 -> E.decodeUtf8 _val6; _ -> P.error "wrong type"})) (Map.lookup (2) fields),
  dependencyLink_callCount = P.maybe (P.error "Missing required field: callCount") (\(_,_val4) -> (case _val4 of {T.TI64 _val7 -> _val7; _ -> P.error "wrong type"})) (Map.lookup (4) fields)
  }
to_DependencyLink _ = P.error "not a struct"
read_DependencyLink :: T.Protocol p => p -> P.IO DependencyLink
read_DependencyLink iprot = to_DependencyLink <$> T.readVal iprot (T.T_STRUCT typemap_DependencyLink)
decode_DependencyLink :: T.StatelessProtocol p => p -> LBS.ByteString -> DependencyLink
decode_DependencyLink iprot bs = to_DependencyLink $ T.deserializeVal iprot (T.T_STRUCT typemap_DependencyLink) bs
typemap_DependencyLink :: T.TypeMap
typemap_DependencyLink = Map.fromList [(1,("parent",T.T_STRING)),(2,("child",T.T_STRING)),(4,("callCount",T.T_I64))]
default_DependencyLink :: DependencyLink
default_DependencyLink = DependencyLink{
  dependencyLink_parent = "",
  dependencyLink_child = "",
  dependencyLink_callCount = 0}
data Dependencies = Dependencies  { dependencies_links :: (Vector.Vector DependencyLink)
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable Dependencies where
  hashWithSalt salt record = salt   `H.hashWithSalt` dependencies_links record  
instance QC.Arbitrary Dependencies where 
  arbitrary = M.liftM Dependencies (QC.arbitrary)
  shrink obj | obj == default_Dependencies = []
             | P.otherwise = M.catMaybes
    [ if obj == default_Dependencies{dependencies_links = dependencies_links obj} then P.Nothing else P.Just $ default_Dependencies{dependencies_links = dependencies_links obj}
    ]
from_Dependencies :: Dependencies -> T.ThriftVal
from_Dependencies record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v10 -> P.Just (1, ("links",T.TList (T.T_STRUCT typemap_DependencyLink) $ P.map (\_v12 -> from_DependencyLink _v12) $ Vector.toList _v10))) $ dependencies_links record
  ]
write_Dependencies :: T.Protocol p => p -> Dependencies -> P.IO ()
write_Dependencies oprot record = T.writeVal oprot $ from_Dependencies record
encode_Dependencies :: T.StatelessProtocol p => p -> Dependencies -> LBS.ByteString
encode_Dependencies oprot record = T.serializeVal oprot $ from_Dependencies record
to_Dependencies :: T.ThriftVal -> Dependencies
to_Dependencies (T.TStruct fields) = Dependencies{
  dependencies_links = P.maybe (P.error "Missing required field: links") (\(_,_val14) -> (case _val14 of {T.TList _ _val15 -> (Vector.fromList $ P.map (\_v16 -> (case _v16 of {T.TStruct _val17 -> (to_DependencyLink (T.TStruct _val17)); _ -> P.error "wrong type"})) _val15); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_Dependencies _ = P.error "not a struct"
read_Dependencies :: T.Protocol p => p -> P.IO Dependencies
read_Dependencies iprot = to_Dependencies <$> T.readVal iprot (T.T_STRUCT typemap_Dependencies)
decode_Dependencies :: T.StatelessProtocol p => p -> LBS.ByteString -> Dependencies
decode_Dependencies iprot bs = to_Dependencies $ T.deserializeVal iprot (T.T_STRUCT typemap_Dependencies) bs
typemap_Dependencies :: T.TypeMap
typemap_Dependencies = Map.fromList [(1,("links",(T.T_LIST (T.T_STRUCT typemap_DependencyLink))))]
default_Dependencies :: Dependencies
default_Dependencies = Dependencies{
  dependencies_links = Vector.empty}
