{-# LANGUAGE DeriveDataTypeable #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-missing-fields #-}
{-# OPTIONS_GHC -fno-warn-missing-signatures #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-----------------------------------------------------------------
-- Autogenerated by Thrift Compiler (0.11.0)                      --
--                                                             --
-- DO NOT EDIT UNLESS YOU ARE SURE YOU KNOW WHAT YOU ARE DOING --
-----------------------------------------------------------------

module Aggregation_validator_Types where
import Prelude (($), (.), (>>=), (==), (++))
import qualified Prelude as P
import qualified Control.Exception as X
import qualified Control.Monad as M ( liftM, ap, when )
import Data.Functor ( (<$>) )
import qualified Data.ByteString.Lazy as LBS
import qualified Data.Hashable as H
import qualified Data.Int as I
import qualified Data.Maybe as M (catMaybes)
import qualified Data.Text.Lazy.Encoding as E ( decodeUtf8, encodeUtf8 )
import qualified Data.Text.Lazy as LT
import qualified GHC.Generics as G (Generic)
import qualified Data.Typeable as TY ( Typeable )
import qualified Data.HashMap.Strict as Map
import qualified Data.HashSet as Set
import qualified Data.Vector as Vector
import qualified Test.QuickCheck.Arbitrary as QC ( Arbitrary(..) )
import qualified Test.QuickCheck as QC ( elements )

import qualified Thrift as T
import qualified Thrift.Types as T
import qualified Thrift.Arbitraries as T


data ValidateTraceResponse = ValidateTraceResponse  { validateTraceResponse_ok :: P.Bool
  , validateTraceResponse_traceCount :: I.Int64
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable ValidateTraceResponse where
  hashWithSalt salt record = salt   `H.hashWithSalt` validateTraceResponse_ok record   `H.hashWithSalt` validateTraceResponse_traceCount record  
instance QC.Arbitrary ValidateTraceResponse where 
  arbitrary = M.liftM ValidateTraceResponse (QC.arbitrary)
          `M.ap`(QC.arbitrary)
  shrink obj | obj == default_ValidateTraceResponse = []
             | P.otherwise = M.catMaybes
    [ if obj == default_ValidateTraceResponse{validateTraceResponse_ok = validateTraceResponse_ok obj} then P.Nothing else P.Just $ default_ValidateTraceResponse{validateTraceResponse_ok = validateTraceResponse_ok obj}
    , if obj == default_ValidateTraceResponse{validateTraceResponse_traceCount = validateTraceResponse_traceCount obj} then P.Nothing else P.Just $ default_ValidateTraceResponse{validateTraceResponse_traceCount = validateTraceResponse_traceCount obj}
    ]
from_ValidateTraceResponse :: ValidateTraceResponse -> T.ThriftVal
from_ValidateTraceResponse record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v2 -> P.Just (1, ("ok",T.TBool _v2))) $ validateTraceResponse_ok record
  , (\_v2 -> P.Just (2, ("traceCount",T.TI64 _v2))) $ validateTraceResponse_traceCount record
  ]
write_ValidateTraceResponse :: T.Protocol p => p -> ValidateTraceResponse -> P.IO ()
write_ValidateTraceResponse oprot record = T.writeVal oprot $ from_ValidateTraceResponse record
encode_ValidateTraceResponse :: T.StatelessProtocol p => p -> ValidateTraceResponse -> LBS.ByteString
encode_ValidateTraceResponse oprot record = T.serializeVal oprot $ from_ValidateTraceResponse record
to_ValidateTraceResponse :: T.ThriftVal -> ValidateTraceResponse
to_ValidateTraceResponse (T.TStruct fields) = ValidateTraceResponse{
  validateTraceResponse_ok = P.maybe (P.error "Missing required field: ok") (\(_,_val4) -> (case _val4 of {T.TBool _val5 -> _val5; _ -> P.error "wrong type"})) (Map.lookup (1) fields),
  validateTraceResponse_traceCount = P.maybe (P.error "Missing required field: traceCount") (\(_,_val4) -> (case _val4 of {T.TI64 _val6 -> _val6; _ -> P.error "wrong type"})) (Map.lookup (2) fields)
  }
to_ValidateTraceResponse _ = P.error "not a struct"
read_ValidateTraceResponse :: T.Protocol p => p -> P.IO ValidateTraceResponse
read_ValidateTraceResponse iprot = to_ValidateTraceResponse <$> T.readVal iprot (T.T_STRUCT typemap_ValidateTraceResponse)
decode_ValidateTraceResponse :: T.StatelessProtocol p => p -> LBS.ByteString -> ValidateTraceResponse
decode_ValidateTraceResponse iprot bs = to_ValidateTraceResponse $ T.deserializeVal iprot (T.T_STRUCT typemap_ValidateTraceResponse) bs
typemap_ValidateTraceResponse :: T.TypeMap
typemap_ValidateTraceResponse = Map.fromList [(1,("ok",T.T_BOOL)),(2,("traceCount",T.T_I64))]
default_ValidateTraceResponse :: ValidateTraceResponse
default_ValidateTraceResponse = ValidateTraceResponse{
  validateTraceResponse_ok = P.False,
  validateTraceResponse_traceCount = 0}
