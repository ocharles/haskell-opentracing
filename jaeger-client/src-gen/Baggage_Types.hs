{-# LANGUAGE DeriveDataTypeable #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-missing-fields #-}
{-# OPTIONS_GHC -fno-warn-missing-signatures #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-----------------------------------------------------------------
-- Autogenerated by Thrift Compiler (0.11.0)                      --
--                                                             --
-- DO NOT EDIT UNLESS YOU ARE SURE YOU KNOW WHAT YOU ARE DOING --
-----------------------------------------------------------------

module Baggage_Types where
import Prelude (($), (.), (>>=), (==), (++))
import qualified Prelude as P
import qualified Control.Exception as X
import qualified Control.Monad as M ( liftM, ap, when )
import Data.Functor ( (<$>) )
import qualified Data.ByteString.Lazy as LBS
import qualified Data.Hashable as H
import qualified Data.Int as I
import qualified Data.Maybe as M (catMaybes)
import qualified Data.Text.Lazy.Encoding as E ( decodeUtf8, encodeUtf8 )
import qualified Data.Text.Lazy as LT
import qualified GHC.Generics as G (Generic)
import qualified Data.Typeable as TY ( Typeable )
import qualified Data.HashMap.Strict as Map
import qualified Data.HashSet as Set
import qualified Data.Vector as Vector
import qualified Test.QuickCheck.Arbitrary as QC ( Arbitrary(..) )
import qualified Test.QuickCheck as QC ( elements )

import qualified Thrift as T
import qualified Thrift.Types as T
import qualified Thrift.Arbitraries as T


data BaggageRestriction = BaggageRestriction  { baggageRestriction_baggageKey :: LT.Text
  , baggageRestriction_maxValueLength :: I.Int32
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable BaggageRestriction where
  hashWithSalt salt record = salt   `H.hashWithSalt` baggageRestriction_baggageKey record   `H.hashWithSalt` baggageRestriction_maxValueLength record  
instance QC.Arbitrary BaggageRestriction where 
  arbitrary = M.liftM BaggageRestriction (QC.arbitrary)
          `M.ap`(QC.arbitrary)
  shrink obj | obj == default_BaggageRestriction = []
             | P.otherwise = M.catMaybes
    [ if obj == default_BaggageRestriction{baggageRestriction_baggageKey = baggageRestriction_baggageKey obj} then P.Nothing else P.Just $ default_BaggageRestriction{baggageRestriction_baggageKey = baggageRestriction_baggageKey obj}
    , if obj == default_BaggageRestriction{baggageRestriction_maxValueLength = baggageRestriction_maxValueLength obj} then P.Nothing else P.Just $ default_BaggageRestriction{baggageRestriction_maxValueLength = baggageRestriction_maxValueLength obj}
    ]
from_BaggageRestriction :: BaggageRestriction -> T.ThriftVal
from_BaggageRestriction record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v2 -> P.Just (1, ("baggageKey",T.TString $ E.encodeUtf8 _v2))) $ baggageRestriction_baggageKey record
  , (\_v2 -> P.Just (2, ("maxValueLength",T.TI32 _v2))) $ baggageRestriction_maxValueLength record
  ]
write_BaggageRestriction :: T.Protocol p => p -> BaggageRestriction -> P.IO ()
write_BaggageRestriction oprot record = T.writeVal oprot $ from_BaggageRestriction record
encode_BaggageRestriction :: T.StatelessProtocol p => p -> BaggageRestriction -> LBS.ByteString
encode_BaggageRestriction oprot record = T.serializeVal oprot $ from_BaggageRestriction record
to_BaggageRestriction :: T.ThriftVal -> BaggageRestriction
to_BaggageRestriction (T.TStruct fields) = BaggageRestriction{
  baggageRestriction_baggageKey = P.maybe (P.error "Missing required field: baggageKey") (\(_,_val4) -> (case _val4 of {T.TString _val5 -> E.decodeUtf8 _val5; _ -> P.error "wrong type"})) (Map.lookup (1) fields),
  baggageRestriction_maxValueLength = P.maybe (P.error "Missing required field: maxValueLength") (\(_,_val4) -> (case _val4 of {T.TI32 _val6 -> _val6; _ -> P.error "wrong type"})) (Map.lookup (2) fields)
  }
to_BaggageRestriction _ = P.error "not a struct"
read_BaggageRestriction :: T.Protocol p => p -> P.IO BaggageRestriction
read_BaggageRestriction iprot = to_BaggageRestriction <$> T.readVal iprot (T.T_STRUCT typemap_BaggageRestriction)
decode_BaggageRestriction :: T.StatelessProtocol p => p -> LBS.ByteString -> BaggageRestriction
decode_BaggageRestriction iprot bs = to_BaggageRestriction $ T.deserializeVal iprot (T.T_STRUCT typemap_BaggageRestriction) bs
typemap_BaggageRestriction :: T.TypeMap
typemap_BaggageRestriction = Map.fromList [(1,("baggageKey",T.T_STRING)),(2,("maxValueLength",T.T_I32))]
default_BaggageRestriction :: BaggageRestriction
default_BaggageRestriction = BaggageRestriction{
  baggageRestriction_baggageKey = "",
  baggageRestriction_maxValueLength = 0}
