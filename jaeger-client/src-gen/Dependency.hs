{-# LANGUAGE DeriveDataTypeable #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-missing-fields #-}
{-# OPTIONS_GHC -fno-warn-missing-signatures #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-----------------------------------------------------------------
-- Autogenerated by Thrift Compiler (0.11.0)                      --
--                                                             --
-- DO NOT EDIT UNLESS YOU ARE SURE YOU KNOW WHAT YOU ARE DOING --
-----------------------------------------------------------------

module Dependency where
import Prelude (($), (.), (>>=), (==), (++))
import qualified Prelude as P
import qualified Control.Exception as X
import qualified Control.Monad as M ( liftM, ap, when )
import Data.Functor ( (<$>) )
import qualified Data.ByteString.Lazy as LBS
import qualified Data.Hashable as H
import qualified Data.Int as I
import qualified Data.Maybe as M (catMaybes)
import qualified Data.Text.Lazy.Encoding as E ( decodeUtf8, encodeUtf8 )
import qualified Data.Text.Lazy as LT
import qualified GHC.Generics as G (Generic)
import qualified Data.Typeable as TY ( Typeable )
import qualified Data.HashMap.Strict as Map
import qualified Data.HashSet as Set
import qualified Data.Vector as Vector
import qualified Test.QuickCheck.Arbitrary as QC ( Arbitrary(..) )
import qualified Test.QuickCheck as QC ( elements )

import qualified Thrift as T
import qualified Thrift.Types as T
import qualified Thrift.Arbitraries as T


import Dependency_Types
import qualified Dependency_Iface as Iface
-- HELPER FUNCTIONS AND STRUCTURES --

data GetDependenciesForTrace_args = GetDependenciesForTrace_args  { getDependenciesForTrace_args_traceId :: LT.Text
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable GetDependenciesForTrace_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` getDependenciesForTrace_args_traceId record  
instance QC.Arbitrary GetDependenciesForTrace_args where 
  arbitrary = M.liftM GetDependenciesForTrace_args (QC.arbitrary)
  shrink obj | obj == default_GetDependenciesForTrace_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_GetDependenciesForTrace_args{getDependenciesForTrace_args_traceId = getDependenciesForTrace_args_traceId obj} then P.Nothing else P.Just $ default_GetDependenciesForTrace_args{getDependenciesForTrace_args_traceId = getDependenciesForTrace_args_traceId obj}
    ]
from_GetDependenciesForTrace_args :: GetDependenciesForTrace_args -> T.ThriftVal
from_GetDependenciesForTrace_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v20 -> P.Just (1, ("traceId",T.TString $ E.encodeUtf8 _v20))) $ getDependenciesForTrace_args_traceId record
  ]
write_GetDependenciesForTrace_args :: T.Protocol p => p -> GetDependenciesForTrace_args -> P.IO ()
write_GetDependenciesForTrace_args oprot record = T.writeVal oprot $ from_GetDependenciesForTrace_args record
encode_GetDependenciesForTrace_args :: T.StatelessProtocol p => p -> GetDependenciesForTrace_args -> LBS.ByteString
encode_GetDependenciesForTrace_args oprot record = T.serializeVal oprot $ from_GetDependenciesForTrace_args record
to_GetDependenciesForTrace_args :: T.ThriftVal -> GetDependenciesForTrace_args
to_GetDependenciesForTrace_args (T.TStruct fields) = GetDependenciesForTrace_args{
  getDependenciesForTrace_args_traceId = P.maybe (P.error "Missing required field: traceId") (\(_,_val22) -> (case _val22 of {T.TString _val23 -> E.decodeUtf8 _val23; _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_GetDependenciesForTrace_args _ = P.error "not a struct"
read_GetDependenciesForTrace_args :: T.Protocol p => p -> P.IO GetDependenciesForTrace_args
read_GetDependenciesForTrace_args iprot = to_GetDependenciesForTrace_args <$> T.readVal iprot (T.T_STRUCT typemap_GetDependenciesForTrace_args)
decode_GetDependenciesForTrace_args :: T.StatelessProtocol p => p -> LBS.ByteString -> GetDependenciesForTrace_args
decode_GetDependenciesForTrace_args iprot bs = to_GetDependenciesForTrace_args $ T.deserializeVal iprot (T.T_STRUCT typemap_GetDependenciesForTrace_args) bs
typemap_GetDependenciesForTrace_args :: T.TypeMap
typemap_GetDependenciesForTrace_args = Map.fromList [(1,("traceId",T.T_STRING))]
default_GetDependenciesForTrace_args :: GetDependenciesForTrace_args
default_GetDependenciesForTrace_args = GetDependenciesForTrace_args{
  getDependenciesForTrace_args_traceId = ""}
data GetDependenciesForTrace_result = GetDependenciesForTrace_result  { getDependenciesForTrace_result_success :: Dependencies
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable GetDependenciesForTrace_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` getDependenciesForTrace_result_success record  
instance QC.Arbitrary GetDependenciesForTrace_result where 
  arbitrary = M.liftM GetDependenciesForTrace_result (QC.arbitrary)
  shrink obj | obj == default_GetDependenciesForTrace_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_GetDependenciesForTrace_result{getDependenciesForTrace_result_success = getDependenciesForTrace_result_success obj} then P.Nothing else P.Just $ default_GetDependenciesForTrace_result{getDependenciesForTrace_result_success = getDependenciesForTrace_result_success obj}
    ]
from_GetDependenciesForTrace_result :: GetDependenciesForTrace_result -> T.ThriftVal
from_GetDependenciesForTrace_result record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v26 -> P.Just (0, ("success",from_Dependencies _v26))) $ getDependenciesForTrace_result_success record
  ]
write_GetDependenciesForTrace_result :: T.Protocol p => p -> GetDependenciesForTrace_result -> P.IO ()
write_GetDependenciesForTrace_result oprot record = T.writeVal oprot $ from_GetDependenciesForTrace_result record
encode_GetDependenciesForTrace_result :: T.StatelessProtocol p => p -> GetDependenciesForTrace_result -> LBS.ByteString
encode_GetDependenciesForTrace_result oprot record = T.serializeVal oprot $ from_GetDependenciesForTrace_result record
to_GetDependenciesForTrace_result :: T.ThriftVal -> GetDependenciesForTrace_result
to_GetDependenciesForTrace_result (T.TStruct fields) = GetDependenciesForTrace_result{
  getDependenciesForTrace_result_success = P.maybe (getDependenciesForTrace_result_success default_GetDependenciesForTrace_result) (\(_,_val28) -> (case _val28 of {T.TStruct _val29 -> (to_Dependencies (T.TStruct _val29)); _ -> P.error "wrong type"})) (Map.lookup (0) fields)
  }
to_GetDependenciesForTrace_result _ = P.error "not a struct"
read_GetDependenciesForTrace_result :: T.Protocol p => p -> P.IO GetDependenciesForTrace_result
read_GetDependenciesForTrace_result iprot = to_GetDependenciesForTrace_result <$> T.readVal iprot (T.T_STRUCT typemap_GetDependenciesForTrace_result)
decode_GetDependenciesForTrace_result :: T.StatelessProtocol p => p -> LBS.ByteString -> GetDependenciesForTrace_result
decode_GetDependenciesForTrace_result iprot bs = to_GetDependenciesForTrace_result $ T.deserializeVal iprot (T.T_STRUCT typemap_GetDependenciesForTrace_result) bs
typemap_GetDependenciesForTrace_result :: T.TypeMap
typemap_GetDependenciesForTrace_result = Map.fromList [(0,("success",(T.T_STRUCT typemap_Dependencies)))]
default_GetDependenciesForTrace_result :: GetDependenciesForTrace_result
default_GetDependenciesForTrace_result = GetDependenciesForTrace_result{
  getDependenciesForTrace_result_success = default_Dependencies}
data SaveDependencies_args = SaveDependencies_args  { saveDependencies_args_dependencies :: Dependencies
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable SaveDependencies_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` saveDependencies_args_dependencies record  
instance QC.Arbitrary SaveDependencies_args where 
  arbitrary = M.liftM SaveDependencies_args (QC.arbitrary)
  shrink obj | obj == default_SaveDependencies_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_SaveDependencies_args{saveDependencies_args_dependencies = saveDependencies_args_dependencies obj} then P.Nothing else P.Just $ default_SaveDependencies_args{saveDependencies_args_dependencies = saveDependencies_args_dependencies obj}
    ]
from_SaveDependencies_args :: SaveDependencies_args -> T.ThriftVal
from_SaveDependencies_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v32 -> P.Just (1, ("dependencies",from_Dependencies _v32))) $ saveDependencies_args_dependencies record
  ]
write_SaveDependencies_args :: T.Protocol p => p -> SaveDependencies_args -> P.IO ()
write_SaveDependencies_args oprot record = T.writeVal oprot $ from_SaveDependencies_args record
encode_SaveDependencies_args :: T.StatelessProtocol p => p -> SaveDependencies_args -> LBS.ByteString
encode_SaveDependencies_args oprot record = T.serializeVal oprot $ from_SaveDependencies_args record
to_SaveDependencies_args :: T.ThriftVal -> SaveDependencies_args
to_SaveDependencies_args (T.TStruct fields) = SaveDependencies_args{
  saveDependencies_args_dependencies = P.maybe (saveDependencies_args_dependencies default_SaveDependencies_args) (\(_,_val34) -> (case _val34 of {T.TStruct _val35 -> (to_Dependencies (T.TStruct _val35)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_SaveDependencies_args _ = P.error "not a struct"
read_SaveDependencies_args :: T.Protocol p => p -> P.IO SaveDependencies_args
read_SaveDependencies_args iprot = to_SaveDependencies_args <$> T.readVal iprot (T.T_STRUCT typemap_SaveDependencies_args)
decode_SaveDependencies_args :: T.StatelessProtocol p => p -> LBS.ByteString -> SaveDependencies_args
decode_SaveDependencies_args iprot bs = to_SaveDependencies_args $ T.deserializeVal iprot (T.T_STRUCT typemap_SaveDependencies_args) bs
typemap_SaveDependencies_args :: T.TypeMap
typemap_SaveDependencies_args = Map.fromList [(1,("dependencies",(T.T_STRUCT typemap_Dependencies)))]
default_SaveDependencies_args :: SaveDependencies_args
default_SaveDependencies_args = SaveDependencies_args{
  saveDependencies_args_dependencies = default_Dependencies}
data SaveDependencies_result = SaveDependencies_result deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable SaveDependencies_result where
  hashWithSalt salt record = salt  
instance QC.Arbitrary SaveDependencies_result where 
  arbitrary = QC.elements [SaveDependencies_result]
from_SaveDependencies_result :: SaveDependencies_result -> T.ThriftVal
from_SaveDependencies_result record = T.TStruct $ Map.fromList $ M.catMaybes
  []
write_SaveDependencies_result :: T.Protocol p => p -> SaveDependencies_result -> P.IO ()
write_SaveDependencies_result oprot record = T.writeVal oprot $ from_SaveDependencies_result record
encode_SaveDependencies_result :: T.StatelessProtocol p => p -> SaveDependencies_result -> LBS.ByteString
encode_SaveDependencies_result oprot record = T.serializeVal oprot $ from_SaveDependencies_result record
to_SaveDependencies_result :: T.ThriftVal -> SaveDependencies_result
to_SaveDependencies_result (T.TStruct fields) = SaveDependencies_result{

  }
to_SaveDependencies_result _ = P.error "not a struct"
read_SaveDependencies_result :: T.Protocol p => p -> P.IO SaveDependencies_result
read_SaveDependencies_result iprot = to_SaveDependencies_result <$> T.readVal iprot (T.T_STRUCT typemap_SaveDependencies_result)
decode_SaveDependencies_result :: T.StatelessProtocol p => p -> LBS.ByteString -> SaveDependencies_result
decode_SaveDependencies_result iprot bs = to_SaveDependencies_result $ T.deserializeVal iprot (T.T_STRUCT typemap_SaveDependencies_result) bs
typemap_SaveDependencies_result :: T.TypeMap
typemap_SaveDependencies_result = Map.fromList []
default_SaveDependencies_result :: SaveDependencies_result
default_SaveDependencies_result = SaveDependencies_result{
}
process_getDependenciesForTrace (seqid, iprot, oprot, handler) = do
  args <- read_GetDependenciesForTrace_args iprot
  (X.catch
    (do
      val <- Iface.getDependenciesForTrace handler (getDependenciesForTrace_args_traceId args)
      let res = default_GetDependenciesForTrace_result{getDependenciesForTrace_result_success = val}
      T.writeMessage oprot ("getDependenciesForTrace", T.M_REPLY, seqid) $
        write_GetDependenciesForTrace_result oprot res)
    ((\_ -> do
      T.writeMessage oprot ("getDependenciesForTrace", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
process_saveDependencies (seqid, iprot, oprot, handler) = do
  args <- read_SaveDependencies_args iprot
  (X.catch
    (do
      Iface.saveDependencies handler (saveDependencies_args_dependencies args)
      P.return ())
    ((\_ -> do
      P.return ()) :: X.SomeException -> P.IO ()))
proc_ handler (iprot,oprot) (name,typ,seqid) = case name of
  "getDependenciesForTrace" -> process_getDependenciesForTrace (seqid,iprot,oprot,handler)
  "saveDependencies" -> process_saveDependencies (seqid,iprot,oprot,handler)
  _ -> do
    _ <- T.readVal iprot (T.T_STRUCT Map.empty)
    T.writeMessage oprot (name,T.M_EXCEPTION,seqid) $
      T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN_METHOD ("Unknown function " ++ LT.unpack name))
process handler (iprot, oprot) = do
  T.readMessage iprot (
    proc_ handler (iprot,oprot))
  P.return P.True
